---
- name: Ensure that deploy owns /srv/www
  file: owner=deploy group=deploy path=/srv/www state=directory

- name: Ensure that /srv/www/shared exists
  file: path=/srv/www/shared owner=deploy group=deploy state=directory

- name: Ensure git is installed
  apt: pkg=git

- name: Install package dependencies that allow gem native extensions to be built
  apt:
    pkg: "{{ item }}"
  with_items:
    - libmysqlclient-dev
    - g++

- name: Ensure that .env exists
  template: src=env dest=/srv/www/shared/.env owner=deploy group=deploy
  notify: nginx restart

- name: Generate the overall nginx config
  template: src=nginx.conf dest=/etc/nginx/nginx.conf
  notify: nginx reload

- name: Generate the nginx config for the app
  template: src=default dest=/etc/nginx/sites-available/ owner=root group=root mode=644
  notify: nginx reload

- name: Create cuttlefish postgresql database
  postgresql_db: name=cuttlefish

- name: Create cuttlefish posgresql role
  postgresql_user: db=cuttlefish name=cuttlefish password={{ db_password }}

- name: Create postgresql role for root so it can do backups
  postgresql_user:
    name: root
    role_attr_flags: SUPERUSER

- name: Copy over database configuration for application
  template: src=database.yml dest=/srv/www/shared/database.yml owner=deploy group=deploy
  notify: nginx restart

- name: Allow deploy user to export foreman script
  lineinfile: "dest=/etc/sudoers state=present line='deploy ALL=(ALL) NOPASSWD: /usr/local/lib/rvm/wrappers/default/bundle exec foreman export upstart /etc/init -a cuttlefish -u deploy -l /srv/www/shared/log -f Procfile.production' validate='visudo -cf %s'"

- name: Allow deploy user to restart cuttlefish service
  lineinfile: "dest=/etc/sudoers state=present line='deploy ALL=(ALL) NOPASSWD: /bin/systemctl restart cuttlefish.target' validate='visudo -cf %s'"

# # TODO: Use this to create certificates
# - name: Download SSLMate APT source
#   get_url:
#     url: https://sslmate.com/apt/ubuntu1404/sslmate.list
#     dest: /etc/apt/sources.list.d/sslmate.list
#
# - name: Download SSLMate APT key
#   get_url:
#     url: https://sslmate.com/apt/ubuntu1404/sslmate.gpg
#     dest: /etc/apt/trusted.gpg.d/sslmate.gpg
#
# - name: Install SSLMate
#   apt:
#     name: sslmate
#     update_cache: yes
#
# - name: Copy SSLMate account configuration
#   template:
#     src: sslmate.conf
#     dest: /etc/sslmate.conf
#     owner: root
#     group: root
#     mode: 0600

- name: Allow deploy to read some log files (different from admin group)
  user: name=deploy groups=adm append=yes

# - name: Ensure that /etc/sslmate exists
#   file:
#     path: /etc/sslmate
#     owner: root
#     group: root
#     state: directory

# - name: Add private SSL key
#   copy: content="{{ private_ssl_key }}" dest=/etc/sslmate/cuttlefish.oaf.org.au.key owner=root group=root mode=0600
#   notify: nginx reload
#
# - name: Download SSLMate certificates
#   command: sslmate download cuttlefish.oaf.org.au creates=/etc/sslmate/cuttlefish.oaf.org.au.crt
#   notify: nginx reload
#
# - name: Create SSLMate automated renewals cronjob
#   copy:
#     src: sslmate
#     dest: /etc/cron.daily/sslmate
#     owner: root
#     group: root
#     mode: 0744

- name: Create old email archiving daily cronjob for 12:00 UTC (22:00 AEST)
  cron:
    name: daily old email archiving
    job:  "cd /srv/www/current && /usr/local/lib/rvm/bin/rvm . do bundle exec rake cuttlefish:auto_archive RAILS_ENV=production"
    user: deploy
    minute: 0
    hour: 12
